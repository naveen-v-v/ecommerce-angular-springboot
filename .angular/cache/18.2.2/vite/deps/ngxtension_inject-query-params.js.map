{
  "version": 3,
  "sources": ["../../../../../node_modules/ngxtension/fesm2022/ngxtension-inject-query-params.mjs"],
  "sourcesContent": ["import { assertInInjectionContext, inject } from '@angular/core';\nimport { toSignal } from '@angular/core/rxjs-interop';\nimport { ActivatedRoute } from '@angular/router';\nimport { map } from 'rxjs';\n\n/**\n * The `injectQueryParams` function allows you to access and manipulate query parameters from the current route.\n *\n * @template ReadT - The expected type of the read value.\n * @param {string} keyOrParamsTransform - The name of the query parameter to retrieve, or a transform function to apply to the query parameters object.\n * @param {QueryParamsOptions} options - Optional configuration options for the query parameter.\n * @returns {QueryParamsOptions} A `Signal` that emits the transformed value of the specified query parameter, or the entire query parameters object if no key is provided.\n *\n * @example\n * const search = injectQueryParams('search'); // returns the value of the 'search' query param\n * const search = injectQueryParams(p => p['search'] as string); // same as above but can be used with a custom transform function\n * const idParam = injectQueryParams('id', {transform: numberAttribute}); // returns the value fo the 'id' query params and transforms it into a number\n * const idParam = injectQueryParams(p => numberAttribute(p['id'])); // same as above but can be used with a custom transform function\n * const queryParams = injectQueryParams(); // returns the entire query params object\n */\nfunction injectQueryParams(keyOrParamsTransform, options = {}) {\n  assertInInjectionContext(injectQueryParams);\n  const route = inject(ActivatedRoute);\n  const queryParams = route.snapshot.queryParams || {};\n  const {\n    transform,\n    initialValue\n  } = options;\n  if (!keyOrParamsTransform) {\n    return toSignal(route.queryParams, {\n      initialValue: queryParams\n    });\n  }\n  if (typeof keyOrParamsTransform === 'function') {\n    return toSignal(route.queryParams.pipe(map(keyOrParamsTransform)), {\n      initialValue: keyOrParamsTransform(queryParams)\n    });\n  }\n  const getParam = params => {\n    const param = params?.[keyOrParamsTransform];\n    if (!param) {\n      return initialValue ?? null;\n    }\n    if (Array.isArray(param)) {\n      if (param.length < 1) {\n        return initialValue ?? null;\n      }\n      return transform ? transform(param[0]) : param[0];\n    }\n    return transform ? transform(param) : param;\n  };\n  return toSignal(route.queryParams.pipe(map(getParam)), {\n    initialValue: getParam(queryParams)\n  });\n}\n/**\n * The `injectQueryParams` function namespace provides additional functionality for handling array query parameters.\n */\n(function (injectQueryParams) {\n  /**\n   * Retrieve an array query parameter with optional configuration options.\n   *\n   * @template ReadT - The expected type of the read value.\n   * @param {string} key - The name of the array query parameter to retrieve.\n   * @param {QueryParamsOptions} options - Optional configuration options for the array query parameter.\n   * @returns {Signal} A `Signal` that emits an array of transformed values for the specified query parameter, or `null` if it's not present.\n   */\n  function array(key, options = {}) {\n    assertInInjectionContext(injectQueryParams.array);\n    const route = inject(ActivatedRoute);\n    const queryParams = route.snapshot.queryParams || {};\n    const {\n      transform,\n      initialValue\n    } = options;\n    const transformParam = param => {\n      if (!param) {\n        return initialValue ?? null;\n      }\n      if (Array.isArray(param)) {\n        if (param.length < 1) {\n          return initialValue ?? null;\n        }\n        // Avoid passing the transform function directly into the map function,\n        // because transform may inadvertently use the array index as its second argument.\n        // Typically, map provides the array index as the second argument to its callback,\n        // which can conflict with transform functions like numberAttribute that expect a fallbackValue as their second parameter.\n        // This mismatch can lead to unexpected behavior, such as values being erroneously converted to array indices\n        // instead of NaN (which would be correct)\n        return transform ? param.map(it => transform(it)) : param;\n      }\n      return [transform ? transform(param) : param];\n    };\n    const getParam = params => {\n      const param = params?.[key];\n      return transformParam(param);\n    };\n    return toSignal(route.queryParams.pipe(map(getParam)), {\n      initialValue: getParam(queryParams)\n    });\n  }\n  injectQueryParams.array = array;\n})(injectQueryParams || (injectQueryParams = {}));\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { injectQueryParams };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAoBA,SAAS,kBAAkB,sBAAsB,UAAU,CAAC,GAAG;AAC7D,2BAAyB,iBAAiB;AAC1C,QAAM,QAAQ,OAAO,cAAc;AACnC,QAAM,cAAc,MAAM,SAAS,eAAe,CAAC;AACnD,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,EACF,IAAI;AACJ,MAAI,CAAC,sBAAsB;AACzB,WAAO,SAAS,MAAM,aAAa;AAAA,MACjC,cAAc;AAAA,IAChB,CAAC;AAAA,EACH;AACA,MAAI,OAAO,yBAAyB,YAAY;AAC9C,WAAO,SAAS,MAAM,YAAY,KAAK,IAAI,oBAAoB,CAAC,GAAG;AAAA,MACjE,cAAc,qBAAqB,WAAW;AAAA,IAChD,CAAC;AAAA,EACH;AACA,QAAM,WAAW,YAAU;AACzB,UAAM,QAAQ,SAAS,oBAAoB;AAC3C,QAAI,CAAC,OAAO;AACV,aAAO,gBAAgB;AAAA,IACzB;AACA,QAAI,MAAM,QAAQ,KAAK,GAAG;AACxB,UAAI,MAAM,SAAS,GAAG;AACpB,eAAO,gBAAgB;AAAA,MACzB;AACA,aAAO,YAAY,UAAU,MAAM,CAAC,CAAC,IAAI,MAAM,CAAC;AAAA,IAClD;AACA,WAAO,YAAY,UAAU,KAAK,IAAI;AAAA,EACxC;AACA,SAAO,SAAS,MAAM,YAAY,KAAK,IAAI,QAAQ,CAAC,GAAG;AAAA,IACrD,cAAc,SAAS,WAAW;AAAA,EACpC,CAAC;AACH;AAAA,CAIC,SAAUA,oBAAmB;AAS5B,WAAS,MAAM,KAAK,UAAU,CAAC,GAAG;AAChC,6BAAyBA,mBAAkB,KAAK;AAChD,UAAM,QAAQ,OAAO,cAAc;AACnC,UAAM,cAAc,MAAM,SAAS,eAAe,CAAC;AACnD,UAAM;AAAA,MACJ;AAAA,MACA;AAAA,IACF,IAAI;AACJ,UAAM,iBAAiB,WAAS;AAC9B,UAAI,CAAC,OAAO;AACV,eAAO,gBAAgB;AAAA,MACzB;AACA,UAAI,MAAM,QAAQ,KAAK,GAAG;AACxB,YAAI,MAAM,SAAS,GAAG;AACpB,iBAAO,gBAAgB;AAAA,QACzB;AAOA,eAAO,YAAY,MAAM,IAAI,QAAM,UAAU,EAAE,CAAC,IAAI;AAAA,MACtD;AACA,aAAO,CAAC,YAAY,UAAU,KAAK,IAAI,KAAK;AAAA,IAC9C;AACA,UAAM,WAAW,YAAU;AACzB,YAAM,QAAQ,SAAS,GAAG;AAC1B,aAAO,eAAe,KAAK;AAAA,IAC7B;AACA,WAAO,SAAS,MAAM,YAAY,KAAK,IAAI,QAAQ,CAAC,GAAG;AAAA,MACrD,cAAc,SAAS,WAAW;AAAA,IACpC,CAAC;AAAA,EACH;AACA,EAAAA,mBAAkB,QAAQ;AAC5B,GAAG,sBAAsB,oBAAoB,CAAC,EAAE;",
  "names": ["injectQueryParams"]
}
