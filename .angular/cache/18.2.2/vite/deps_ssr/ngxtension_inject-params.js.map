{
  "version": 3,
  "sources": ["../../../../../node_modules/ngxtension/fesm2022/ngxtension-inject-params.mjs"],
  "sourcesContent": ["import { assertInInjectionContext, inject } from '@angular/core';\nimport { toSignal } from '@angular/core/rxjs-interop';\nimport { ActivatedRoute } from '@angular/router';\nimport { map } from 'rxjs';\n\n/**\n * Injects the params from the current route.\n * If a key is provided, it will return the value of that key.\n * If a transform function is provided, it will return the result of that function.\n * Otherwise, it will return the entire params object.\n *\n * @example\n * const userId = injectParams('id'); // returns the value of the 'id' param\n * const userId = injectParams(p => p['id'] as string); // same as above but can be used with a custom transform function\n * const params = injectParams(); // returns the entire params object\n *\n * @param keyOrTransform OPTIONAL The key of the param to return, or a transform function to apply to the params object\n */\nfunction injectParams(keyOrTransform) {\n  assertInInjectionContext(injectParams);\n  const route = inject(ActivatedRoute);\n  const params = route.snapshot.params;\n  if (typeof keyOrTransform === 'function') {\n    return toSignal(route.params.pipe(map(keyOrTransform)), {\n      initialValue: keyOrTransform(params)\n    });\n  }\n  const getParam = params => keyOrTransform ? params?.[keyOrTransform] ?? null : params;\n  return toSignal(route.params.pipe(map(getParam)), {\n    initialValue: getParam(params)\n  });\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { injectParams };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;AAGA,kBAAoB;AAepB,SAAS,aAAa,gBAAgB;AACpC,2BAAyB,YAAY;AACrC,QAAM,QAAQ,OAAO,cAAc;AACnC,QAAM,SAAS,MAAM,SAAS;AAC9B,MAAI,OAAO,mBAAmB,YAAY;AACxC,WAAO,SAAS,MAAM,OAAO,SAAK,iBAAI,cAAc,CAAC,GAAG;AAAA,MACtD,cAAc,eAAe,MAAM;AAAA,IACrC,CAAC;AAAA,EACH;AACA,QAAM,WAAW,CAAAA,YAAU,iBAAiBA,UAAS,cAAc,KAAK,OAAOA;AAC/E,SAAO,SAAS,MAAM,OAAO,SAAK,iBAAI,QAAQ,CAAC,GAAG;AAAA,IAChD,cAAc,SAAS,MAAM;AAAA,EAC/B,CAAC;AACH;",
  "names": ["params"]
}
